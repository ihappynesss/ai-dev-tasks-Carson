services:
  # PostgreSQL database for n8n workflow persistence
  postgres:
    image: postgres:15
    container_name: n8n-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_USER=n8n
      - POSTGRES_PASSWORD=n8n_password
      - POSTGRES_DB=n8n
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U n8n']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - n8n-network

  # Redis for queue management and caching
  redis:
    image: redis:7-alpine
    container_name: n8n-redis
    restart: unless-stopped
    command: redis-server --maxmemory 256mb --maxmemory-policy allkeys-lru --appendonly yes
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - n8n-network

  # n8n workflow automation
  n8n:
    image: n8nio/n8n:latest
    container_name: n8n-local
    restart: unless-stopped
    ports:
      - '5678:5678'
    environment:
      # Database configuration
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=n8n
      - DB_POSTGRESDB_USER=n8n
      - DB_POSTGRESDB_PASSWORD=n8n_password

      # n8n configuration
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=admin
      - N8N_BASIC_AUTH_PASSWORD=admin123
      - N8N_HOST=localhost
      - N8N_PORT=5678
      - N8N_PROTOCOL=http
      - WEBHOOK_URL=http://localhost:5678/

      # Execution configuration
      - EXECUTIONS_MODE=regular
      - EXECUTIONS_PROCESS=main
      - EXECUTIONS_DATA_SAVE_ON_ERROR=all
      - EXECUTIONS_DATA_SAVE_ON_SUCCESS=all
      - EXECUTIONS_DATA_SAVE_MANUAL_EXECUTIONS=true

      # Generic timezone
      - GENERIC_TIMEZONE=Australia/Sydney

      # Logging
      - N8N_LOG_LEVEL=info
      - N8N_LOG_OUTPUT=console,file

      # Metrics configuration (Task 12.1)
      - N8N_METRICS=true
      - N8N_METRICS_PREFIX=n8n_

    volumes:
      # Workflow data persistence
      - n8n_data:/home/node/.n8n
      # Mount local workflows directory for development
      - ./workflows:/home/node/.n8n/workflows
      # Mount local credentials directory
      - ./credentials:/home/node/.n8n/credentials
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - n8n-network

  # Prometheus monitoring (Task 12.1)
  prometheus:
    image: prom/prometheus:latest
    container_name: n8n-prometheus
    restart: unless-stopped
    ports:
      - '9090:9090'
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus-config.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/rules:/etc/prometheus/rules:ro
      - prometheus_data:/prometheus
    networks:
      - n8n-network
    depends_on:
      - n8n

  # Redis Exporter for queue metrics (Task 12.3)
  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: n8n-redis-exporter
    restart: unless-stopped
    ports:
      - '9121:9121'
    environment:
      - REDIS_ADDR=redis:6379
      - REDIS_EXPORTER_LOG_FORMAT=json
    networks:
      - n8n-network
    depends_on:
      - redis

  # PostgreSQL Exporter for database metrics
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: n8n-postgres-exporter
    restart: unless-stopped
    ports:
      - '9187:9187'
    environment:
      - DATA_SOURCE_NAME=postgresql://n8n:n8n_password@postgres:5432/n8n?sslmode=disable
    networks:
      - n8n-network
    depends_on:
      - postgres

  # Grafana for metrics visualization (Task 12.6)
  grafana:
    image: grafana/grafana:latest
    container_name: n8n-grafana
    restart: unless-stopped
    ports:
      - '3000:3000'
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
      - GF_AUTH_ANONYMOUS_ENABLED=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - n8n-network
    depends_on:
      - prometheus

  # Custom Metrics Exporter (Tasks 12.5-12.11)
  metrics-exporter:
    build: ./monitoring/metrics-exporter
    container_name: n8n-metrics-exporter
    restart: unless-stopped
    ports:
      - '8080:8080'
    environment:
      # Supabase connection (replace with actual values)
      - SUPABASE_HOST=${SUPABASE_HOST:-your-project.supabase.co}
      - SUPABASE_PORT=5432
      - SUPABASE_DB=postgres
      - SUPABASE_USER=${SUPABASE_USER:-postgres}
      - SUPABASE_PASSWORD=${SUPABASE_PASSWORD:-your-password}
      # Exporter configuration
      - METRICS_PORT=8080
      - COLLECTION_INTERVAL=60
    networks:
      - n8n-network

volumes:
  postgres_data:
    driver: local
  n8n_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  n8n-network:
    driver: bridge
